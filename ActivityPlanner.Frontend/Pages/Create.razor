@page "/activities/create"
@attribute [Authorize]

@using System.Net.Http.Json
@using ActivityPlanner.Frontend.Models.Activities
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject NavigationManager Nav
@inject ILogger<Create> Logger

<h2 class="mb-4">Aktivite Oluştur</h2>

<EditForm Model="@Model" OnValidSubmit="@CreateAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Aktivite Adı</label>
        <InputText class="form-control" @bind-Value="Model.ActivityName" />
        <ValidationMessage For="() => Model.ActivityName" />
    </div>

    <div class="mb-3">
        <label class="form-label">Açıklama</label>
        <InputTextArea class="form-control" rows="4" @bind-Value="Model.ActivityDescription" />
        <ValidationMessage For="() => Model.ActivityDescription" />
    </div>

    <div class="mb-3">
        <label class="form-label">Son Kayıt Tarihi</label>
        <InputDate class="form-control" @bind-Value="Model.LastRegistrationDate" />
        <ValidationMessage For="() => Model.LastRegistrationDate" />
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label class="form-label">Ülke</label>
            <InputText class="form-control" @bind-Value="Model.Country" />
            <ValidationMessage For="() => Model.Country" />
        </div>
        <div class="col-md-6 mb-3">
            <label class="form-label">Şehir</label>
            <InputText class="form-control" @bind-Value="Model.City" />
            <ValidationMessage For="() => Model.City" />
        </div>
    </div>

    <button class="btn btn-primary" disabled="@IsBusy">
        @(IsBusy ? "Kaydediliyor..." : "Oluştur")
    </button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(Error))
{
    <div class="alert alert-danger mt-3">@Error</div>
}

@code {
    private ActivityCreateRequest Model = new()
    {
        // İstersen varsayılanı yarın yap:
        LastRegistrationDate = DateTime.UtcNow.Date.AddDays(1)
    };

    private bool IsBusy;
    private string? Error;

    private async Task CreateAsync()
    {
        try
        {
            IsBusy = true;
            Error = null;

            // Not: Eğer HttpClient'in bir Authorization handler'ı varsa ekstra header eklemene gerek yok.
            var response = await Http.PostAsJsonAsync("activities", Model);

            if (response.IsSuccessStatusCode)
            {
                if (response.StatusCode == System.Net.HttpStatusCode.Created &&
                    response.Headers.Location is not null)
                {
                    Nav.NavigateTo(response.Headers.Location.ToString());
                    return;
                }

                Nav.NavigateTo("/activities");
                return;
            }

            var body = await response.Content.ReadAsStringAsync();
            Error = $"Kaydetme başarısız (HTTP {(int)response.StatusCode}): {body}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Aktivite oluşturulurken hata");
            Error = "Beklenmeyen bir hata oluştu.";
        }
        finally
        {
            IsBusy = false;
        }
    }
}
